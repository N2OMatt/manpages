Help on module tabnanny:

NAME
    tabnanny - The Tab Nanny despises ambiguous indentation.  She knows no mercy.

FILE
    /usr/lib/python2.7/tabnanny.py

MODULE DOCS
    http://docs.python.org/library/tabnanny

DESCRIPTION
    tabnanny -- Detection of ambiguous indentation
    
    For the time being this module is intended to be called as a script.
    However it is possible to import it into an IDE and use the function
    check() described below.
    
    Warning: The API provided by this module is likely to change in future
    releases; such changes may not be backward compatible.

CLASSES
    exceptions.Exception(exceptions.BaseException)
        NannyNag
    
    class NannyNag(exceptions.Exception)
     |  Raised by tokeneater() if detecting an ambiguous indent.
     |  Captured and handled in check().
     |  
     |  Method resolution order:
     |      NannyNag
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, lineno, msg, line)
     |  
     |  get_line(self)
     |  
     |  get_lineno(self)
     |  
     |  get_msg(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message

FUNCTIONS
    check(file)
        check(file_or_dir)
        
        If file_or_dir is a directory and not a symbolic link, then recursively
        descend the directory tree named by file_or_dir, checking all .py files
        along the way. If file_or_dir is an ordinary Python source file, it is
        checked for whitespace related problems. The diagnostic messages are
        written to standard output using the print statement.
    
    process_tokens(tokens)

DATA
    __all__ = ['check', 'NannyNag', 'process_tokens']
    __version__ = '6'

VERSION
    6


