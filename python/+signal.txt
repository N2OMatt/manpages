Help on built-in module signal:

NAME
    signal - This module provides mechanisms to use signal handlers in Python.

FILE
    (built-in)

MODULE DOCS
    http://docs.python.org/library/signal

DESCRIPTION
    Functions:
    
    alarm() -- cause SIGALRM after a specified time [Unix only]
    setitimer() -- cause a signal (described below) after a specified
                   float time and the timer may restart then [Unix only]
    getitimer() -- get current value of timer [Unix only]
    signal() -- set the action for a given signal
    getsignal() -- get the signal action for a given signal
    pause() -- wait until a signal arrives [Unix only]
    default_int_handler() -- default SIGINT handler
    
    signal constants:
    SIG_DFL -- used to refer to the system default handler
    SIG_IGN -- used to ignore the signal
    NSIG -- number of defined signals
    SIGINT, SIGTERM, etc. -- signal numbers
    
    itimer constants:
    ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
                   expiration
    ITIMER_VIRTUAL -- decrements only when the process is executing,
                   and delivers SIGVTALRM upon expiration
    ITIMER_PROF -- decrements both when the process is executing and
                   when the system is executing on behalf of the process.
                   Coupled with ITIMER_VIRTUAL, this timer is usually
                   used to profile the time spent by the application
                   in user and kernel space. SIGPROF is delivered upon
                   expiration.
    
    
    *** IMPORTANT NOTICE ***
    A signal handler function is called with two arguments:
    the first is the signal number, the second is the interrupted stack frame.

CLASSES
    exceptions.IOError(exceptions.EnvironmentError)
        ItimerError
    
    class ItimerError(exceptions.IOError)
     |  Method resolution order:
     |      ItimerError
     |      exceptions.IOError
     |      exceptions.EnvironmentError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.IOError:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.IOError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.EnvironmentError:
     |  
     |  __reduce__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.EnvironmentError:
     |  
     |  errno
     |      exception errno
     |  
     |  filename
     |      exception filename
     |  
     |  strerror
     |      exception strerror
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message

FUNCTIONS
    alarm(...)
        alarm(seconds)
        
        Arrange for SIGALRM to arrive after the given number of seconds.
    
    default_int_handler(...)
        default_int_handler(...)
        
        The default handler for SIGINT installed by Python.
        It raises KeyboardInterrupt.
    
    getitimer(...)
        getitimer(which)
        
        Returns current value of given itimer.
    
    getsignal(...)
        getsignal(sig) -> action
        
        Return the current action for the given signal.  The return value can be:
        SIG_IGN -- if the signal is being ignored
        SIG_DFL -- if the default action for the signal is in effect
        None -- if an unknown handler is in effect
        anything else -- the callable Python object used as a handler
    
    pause(...)
        pause()
        
        Wait until a signal arrives.
    
    set_wakeup_fd(...)
        set_wakeup_fd(fd) -> fd
        
        Sets the fd to be written to (with '\0') when a signal
        comes in.  A library can use this to wakeup select or poll.
        The previous fd is returned.
        
        The fd must be non-blocking.
    
    setitimer(...)
        setitimer(which, seconds[, interval])
        
        Sets given itimer (one of ITIMER_REAL, ITIMER_VIRTUAL
        or ITIMER_PROF) to fire after value seconds and after
        that every interval seconds.
        The itimer can be cleared by setting seconds to zero.
        
        Returns old values as a tuple: (delay, interval).
    
    siginterrupt(...)
        siginterrupt(sig, flag) -> None
        change system call restart behaviour: if flag is False, system calls
        will be restarted when interrupted by signal sig, else system calls
        will be interrupted.
    
    signal(...)
        signal(sig, action) -> action
        
        Set the action for the given signal.  The action can be SIG_DFL,
        SIG_IGN, or a callable Python object.  The previous action is
        returned.  See getsignal() for possible return values.
        
        *** IMPORTANT NOTICE ***
        A signal handler function is called with two arguments:
        the first is the signal number, the second is the interrupted stack frame.

DATA
    ITIMER_PROF = 2L
    ITIMER_REAL = 0L
    ITIMER_VIRTUAL = 1L
    NSIG = 65
    SIGABRT = 6
    SIGALRM = 14
    SIGBUS = 7
    SIGCHLD = 17
    SIGCLD = 17
    SIGCONT = 18
    SIGFPE = 8
    SIGHUP = 1
    SIGILL = 4
    SIGINT = 2
    SIGIO = 29
    SIGIOT = 6
    SIGKILL = 9
    SIGPIPE = 13
    SIGPOLL = 29
    SIGPROF = 27
    SIGPWR = 30
    SIGQUIT = 3
    SIGRTMAX = 64
    SIGRTMIN = 34
    SIGSEGV = 11
    SIGSTOP = 19
    SIGSYS = 31
    SIGTERM = 15
    SIGTRAP = 5
    SIGTSTP = 20
    SIGTTIN = 21
    SIGTTOU = 22
    SIGURG = 23
    SIGUSR1 = 10
    SIGUSR2 = 12
    SIGVTALRM = 26
    SIGWINCH = 28
    SIGXCPU = 24
    SIGXFSZ = 25
    SIG_DFL = 0
    SIG_IGN = 1


