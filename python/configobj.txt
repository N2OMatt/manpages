Help on module configobj:

NAME
    configobj

FILE
    /usr/lib/python2.7/dist-packages/configobj.py

DESCRIPTION
    # configobj.py
    # A config file reader/writer that supports nested sections in config files.
    # Copyright (C) 2005-2014:
    # (name) : (email)
    # Michael Foord: fuzzyman AT voidspace DOT org DOT uk
    # Nicola Larosa: nico AT tekNico DOT net
    # Rob Dennis: rdennis AT gmail DOT com
    # Eli Courtwright: eli AT courtwright DOT org

CLASSES
    __builtin__.object
        SimpleVal
    Section(__builtin__.dict)
        ConfigObj
    exceptions.Exception(exceptions.BaseException)
        UnknownType
    exceptions.IOError(exceptions.EnvironmentError)
        ReloadError
    exceptions.SyntaxError(exceptions.StandardError)
        ConfigObjError
            ConfigspecError
            DuplicateError
            InterpolationError
                InterpolationLoopError
                MissingInterpolationOption
            NestingError
            ParseError
            RepeatSectionError
            UnreprError
    
    class ConfigObj(Section)
     |  An object to read, create, and write config files.
     |  
     |  Method resolution order:
     |      ConfigObj
     |      Section
     |      __builtin__.dict
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, infile=None, options=None, configspec=None, encoding=None, interpolation=True, raise_errors=False, list_values=True, create_empty=False, file_error=False, stringify=True, indent_type=None, default_encoding=None, unrepr=False, write_empty_values=False, _inspec=False)
     |      Parse a config file or create a config file object.
     |      
     |      ``ConfigObj(infile=None, configspec=None, encoding=None,
     |                  interpolation=True, raise_errors=False, list_values=True,
     |                  create_empty=False, file_error=False, stringify=True,
     |                  indent_type=None, default_encoding=None, unrepr=False,
     |                  write_empty_values=False, _inspec=False)``
     |  
     |  __repr__(self)
     |  
     |  reload(self)
     |      Reload a ConfigObj from file.
     |      
     |      This method raises a ``ReloadError`` if the ConfigObj doesn't have
     |      a filename attribute pointing to a file.
     |  
     |  reset(self)
     |      Clear ConfigObj instance and restore to 'freshly created' state.
     |  
     |  validate(self, validator, preserve_errors=False, copy=False, section=None)
     |      Test the ConfigObj against a configspec.
     |      
     |      It uses the ``validator`` object from *validate.py*.
     |      
     |      To run ``validate`` on the current ConfigObj, call: ::
     |      
     |          test = config.validate(validator)
     |      
     |      (Normally having previously passed in the configspec when the ConfigObj
     |      was created - you can dynamically assign a dictionary of checks to the
     |      ``configspec`` attribute of a section though).
     |      
     |      It returns ``True`` if everything passes, or a dictionary of
     |      pass/fails (True/False). If every member of a subsection passes, it
     |      will just have the value ``True``. (It also returns ``False`` if all
     |      members fail).
     |      
     |      In addition, it converts the values from strings to their native
     |      types if their checks pass (and ``stringify`` is set).
     |      
     |      If ``preserve_errors`` is ``True`` (``False`` is default) then instead
     |      of a marking a fail with a ``False``, it will preserve the actual
     |      exception object. This can contain info about the reason for failure.
     |      For example the ``VdtValueTooSmallError`` indicates that the value
     |      supplied was too small. If a value (or section) is missing it will
     |      still be marked as ``False``.
     |      
     |      You must have the validate module to use ``preserve_errors=True``.
     |      
     |      You can then use the ``flatten_errors`` function to turn your nested
     |      results dictionary into a flattened list of failures - useful for
     |      displaying meaningful error messages.
     |  
     |  write(self, outfile=None, section=None)
     |      Write the current ConfigObj as a file
     |      
     |      tekNico: FIXME: use StringIO instead of real files
     |      
     |      >>> filename = a.filename
     |      >>> a.filename = 'test.ini'
     |      >>> a.write()
     |      >>> a.filename = filename
     |      >>> a == ConfigObj('test.ini', raise_errors=True)
     |      1
     |      >>> import os
     |      >>> os.remove('test.ini')
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Section:
     |  
     |  __delitem__(self, key)
     |      Remove items from the sequence when deleting.
     |  
     |  __getitem__(self, key)
     |      Fetch the item and do string interpolation.
     |  
     |  __iter__ = iterkeys(self)
     |      D.iterkeys() -> an iterator over the keys of D
     |  
     |  __reduce__(self)
     |  
     |  __setitem__(self, key, value, unrepr=False)
     |      Correctly set a value.
     |      
     |      Making dictionary values Section instances.
     |      (We have to special case 'Section' instances - which are also dicts)
     |      
     |      Keys must be strings.
     |      Values need only be strings (or lists of strings) if
     |      ``main.stringify`` is set.
     |      
     |      ``unrepr`` must be set when setting a value to a dictionary, without
     |      creating a new sub-section.
     |  
     |  __setstate__(self, state)
     |  
     |  __str__ = __repr__(self)
     |      x.__str__() <==> str(x)
     |  
     |  as_bool(self, key)
     |      Accepts a key as input. The corresponding value must be a string or
     |      the objects (``True`` or 1) or (``False`` or 0). We allow 0 and 1 to
     |      retain compatibility with Python 2.2.
     |      
     |      If the string is one of  ``True``, ``On``, ``Yes``, or ``1`` it returns 
     |      ``True``.
     |      
     |      If the string is one of  ``False``, ``Off``, ``No``, or ``0`` it returns 
     |      ``False``.
     |      
     |      ``as_bool`` is not case sensitive.
     |      
     |      Any other input will raise a ``ValueError``.
     |      
     |      >>> a = ConfigObj()
     |      >>> a['a'] = 'fish'
     |      >>> a.as_bool('a')
     |      Traceback (most recent call last):
     |      ValueError: Value "fish" is neither True nor False
     |      >>> a['b'] = 'True'
     |      >>> a.as_bool('b')
     |      1
     |      >>> a['b'] = 'off'
     |      >>> a.as_bool('b')
     |      0
     |  
     |  as_float(self, key)
     |      A convenience method which coerces the specified value to a float.
     |      
     |      If the value is an invalid literal for ``float``, a ``ValueError`` will
     |      be raised.
     |      
     |      >>> a = ConfigObj()
     |      >>> a['a'] = 'fish'
     |      >>> a.as_float('a')  #doctest: +IGNORE_EXCEPTION_DETAIL
     |      Traceback (most recent call last):
     |      ValueError: invalid literal for float(): fish
     |      >>> a['b'] = '1'
     |      >>> a.as_float('b')
     |      1.0
     |      >>> a['b'] = '3.2'
     |      >>> a.as_float('b')  #doctest: +ELLIPSIS
     |      3.2...
     |  
     |  as_int(self, key)
     |      A convenience method which coerces the specified value to an integer.
     |      
     |      If the value is an invalid literal for ``int``, a ``ValueError`` will
     |      be raised.
     |      
     |      >>> a = ConfigObj()
     |      >>> a['a'] = 'fish'
     |      >>> a.as_int('a')
     |      Traceback (most recent call last):
     |      ValueError: invalid literal for int() with base 10: 'fish'
     |      >>> a['b'] = '1'
     |      >>> a.as_int('b')
     |      1
     |      >>> a['b'] = '3.2'
     |      >>> a.as_int('b')
     |      Traceback (most recent call last):
     |      ValueError: invalid literal for int() with base 10: '3.2'
     |  
     |  as_list(self, key)
     |      A convenience method which fetches the specified value, guaranteeing
     |      that it is a list.
     |      
     |      >>> a = ConfigObj()
     |      >>> a['a'] = 1
     |      >>> a.as_list('a')
     |      [1]
     |      >>> a['a'] = (1,)
     |      >>> a.as_list('a')
     |      [1]
     |      >>> a['a'] = [1]
     |      >>> a.as_list('a')
     |      [1]
     |  
     |  clear(self)
     |      A version of clear that also affects scalars/sections
     |      Also clears comments and configspec.
     |      
     |      Leaves other attributes alone :
     |          depth/main/parent are not affected
     |  
     |  dict(self)
     |      Return a deepcopy of self as a dictionary.
     |      
     |      All members that are ``Section`` instances are recursively turned to
     |      ordinary dictionaries - by calling their ``dict`` method.
     |      
     |      >>> n = a.dict()
     |      >>> n == a
     |      1
     |      >>> n is a
     |      0
     |  
     |  get(self, key, default=None)
     |      A version of ``get`` that doesn't bypass string interpolation.
     |  
     |  items(self)
     |      D.items() -> list of D's (key, value) pairs, as 2-tuples
     |  
     |  iteritems(self)
     |      D.iteritems() -> an iterator over the (key, value) items of D
     |  
     |  iterkeys(self)
     |      D.iterkeys() -> an iterator over the keys of D
     |  
     |  itervalues(self)
     |      D.itervalues() -> an iterator over the values of D
     |  
     |  keys(self)
     |      D.keys() -> list of D's keys
     |  
     |  merge(self, indict)
     |      A recursive update - useful for merging config files.
     |      
     |      >>> a = '''[section1]
     |      ...     option1 = True
     |      ...     [[subsection]]
     |      ...     more_options = False
     |      ...     # end of file'''.splitlines()
     |      >>> b = '''# File is user.ini
     |      ...     [section1]
     |      ...     option1 = False
     |      ...     # end of file'''.splitlines()
     |      >>> c1 = ConfigObj(b)
     |      >>> c2 = ConfigObj(a)
     |      >>> c2.merge(c1)
     |      >>> c2
     |      ConfigObj({'section1': {'option1': 'False', 'subsection': {'more_options': 'False'}}})
     |  
     |  pop(self, key, default=<object object>)
     |      'D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised'
     |  
     |  popitem(self)
     |      Pops the first (key,val)
     |  
     |  rename(self, oldkey, newkey)
     |      Change a keyname to another, without changing position in sequence.
     |      
     |      Implemented so that transformations can be made on keys,
     |      as well as on values. (used by encode and decode)
     |      
     |      Also renames comments.
     |  
     |  restore_default(self, key)
     |      Restore (and return) default value for the specified key.
     |      
     |      This method will only work for a ConfigObj that was created
     |      with a configspec and has been validated.
     |      
     |      If there is no default value for this key, ``KeyError`` is raised.
     |  
     |  restore_defaults(self)
     |      Recursively restore default values to all members
     |      that have them.
     |      
     |      This method will only work for a ConfigObj that was created
     |      with a configspec and has been validated.
     |      
     |      It doesn't delete or modify entries without default values.
     |  
     |  setdefault(self, key, default=None)
     |      A version of setdefault that sets sequence if appropriate.
     |  
     |  update(self, indict)
     |      A version of update that uses our ``__setitem__``.
     |  
     |  values(self)
     |      D.values() -> list of D's values
     |  
     |  walk(self, function, raise_errors=True, call_on_sections=False, **keywargs)
     |      Walk every member and call a function on the keyword and value.
     |      
     |      Return a dictionary of the return values
     |      
     |      If the function raises an exception, raise the errror
     |      unless ``raise_errors=False``, in which case set the return value to
     |      ``False``.
     |      
     |      Any unrecognised keyword arguments you pass to walk, will be pased on
     |      to the function you pass in.
     |      
     |      Note: if ``call_on_sections`` is ``True`` then - on encountering a
     |      subsection, *first* the function is called for the *whole* subsection,
     |      and then recurses into it's members. This means your function must be
     |      able to handle strings, dictionaries and lists. This allows you
     |      to change the key of subsections as well as for ordinary members. The
     |      return value when called on the whole subsection has to be discarded.
     |      
     |      See  the encode and decode methods for examples, including functions.
     |      
     |      .. admonition:: caution
     |      
     |          You can use ``walk`` to transform the names of members of a section
     |          but you mustn't add or delete members.
     |      
     |      >>> config = '''[XXXXsection]
     |      ... XXXXkey = XXXXvalue'''.splitlines()
     |      >>> cfg = ConfigObj(config)
     |      >>> cfg
     |      ConfigObj({'XXXXsection': {'XXXXkey': 'XXXXvalue'}})
     |      >>> def transform(section, key):
     |      ...     val = section[key]
     |      ...     newkey = key.replace('XXXX', 'CLIENT1')
     |      ...     section.rename(key, newkey)
     |      ...     if isinstance(val, (tuple, list, dict)):
     |      ...         pass
     |      ...     else:
     |      ...         val = val.replace('XXXX', 'CLIENT1')
     |      ...         section[newkey] = val
     |      >>> cfg.walk(transform, call_on_sections=True)
     |      {'CLIENT1section': {'CLIENT1key': None}}
     |      >>> cfg
     |      ConfigObj({'CLIENT1section': {'CLIENT1key': 'CLIENT1value'}})
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Section:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from __builtin__.dict:
     |  
     |  __cmp__(...)
     |      x.__cmp__(y) <==> cmp(x,y)
     |  
     |  __contains__(...)
     |      D.__contains__(k) -> True if D has a key k, else False
     |  
     |  __eq__(...)
     |      x.__eq__(y) <==> x==y
     |  
     |  __ge__(...)
     |      x.__ge__(y) <==> x>=y
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __gt__(...)
     |      x.__gt__(y) <==> x>y
     |  
     |  __le__(...)
     |      x.__le__(y) <==> x<=y
     |  
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |  
     |  __lt__(...)
     |      x.__lt__(y) <==> x<y
     |  
     |  __ne__(...)
     |      x.__ne__(y) <==> x!=y
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  copy(...)
     |      D.copy() -> a shallow copy of D
     |  
     |  fromkeys(...)
     |      dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.
     |      v defaults to None.
     |  
     |  has_key(...)
     |      D.has_key(k) -> True if D has a key k, else False
     |  
     |  viewitems(...)
     |      D.viewitems() -> a set-like object providing a view on D's items
     |  
     |  viewkeys(...)
     |      D.viewkeys() -> a set-like object providing a view on D's keys
     |  
     |  viewvalues(...)
     |      D.viewvalues() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from __builtin__.dict:
     |  
     |  __hash__ = None
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
    
    class ConfigObjError(exceptions.SyntaxError)
     |  This is the base class for all errors that ConfigObj raises.
     |  It is a subclass of SyntaxError.
     |  
     |  Method resolution order:
     |      ConfigObjError
     |      exceptions.SyntaxError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, message='', line_number=None, line='')
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.SyntaxError:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.SyntaxError:
     |  
     |  filename
     |      exception filename
     |  
     |  lineno
     |      exception lineno
     |  
     |  msg
     |      exception msg
     |  
     |  offset
     |      exception offset
     |  
     |  print_file_and_line
     |      exception print_file_and_line
     |  
     |  text
     |      exception text
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.SyntaxError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class ConfigspecError(ConfigObjError)
     |  An error occured whilst parsing a configspec.
     |  
     |  Method resolution order:
     |      ConfigspecError
     |      ConfigObjError
     |      exceptions.SyntaxError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods inherited from ConfigObjError:
     |  
     |  __init__(self, message='', line_number=None, line='')
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigObjError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.SyntaxError:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.SyntaxError:
     |  
     |  filename
     |      exception filename
     |  
     |  lineno
     |      exception lineno
     |  
     |  msg
     |      exception msg
     |  
     |  offset
     |      exception offset
     |  
     |  print_file_and_line
     |      exception print_file_and_line
     |  
     |  text
     |      exception text
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.SyntaxError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class DuplicateError(ConfigObjError)
     |  The keyword or section specified already exists.
     |  
     |  Method resolution order:
     |      DuplicateError
     |      ConfigObjError
     |      exceptions.SyntaxError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods inherited from ConfigObjError:
     |  
     |  __init__(self, message='', line_number=None, line='')
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigObjError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.SyntaxError:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.SyntaxError:
     |  
     |  filename
     |      exception filename
     |  
     |  lineno
     |      exception lineno
     |  
     |  msg
     |      exception msg
     |  
     |  offset
     |      exception offset
     |  
     |  print_file_and_line
     |      exception print_file_and_line
     |  
     |  text
     |      exception text
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.SyntaxError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class InterpolationError(ConfigObjError)
     |  Base class for the two interpolation errors.
     |  
     |  Method resolution order:
     |      InterpolationError
     |      ConfigObjError
     |      exceptions.SyntaxError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods inherited from ConfigObjError:
     |  
     |  __init__(self, message='', line_number=None, line='')
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigObjError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.SyntaxError:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.SyntaxError:
     |  
     |  filename
     |      exception filename
     |  
     |  lineno
     |      exception lineno
     |  
     |  msg
     |      exception msg
     |  
     |  offset
     |      exception offset
     |  
     |  print_file_and_line
     |      exception print_file_and_line
     |  
     |  text
     |      exception text
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.SyntaxError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class InterpolationLoopError(InterpolationError)
     |  Maximum interpolation depth exceeded in string interpolation.
     |  
     |  Method resolution order:
     |      InterpolationLoopError
     |      InterpolationError
     |      ConfigObjError
     |      exceptions.SyntaxError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, option)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigObjError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.SyntaxError:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.SyntaxError:
     |  
     |  filename
     |      exception filename
     |  
     |  lineno
     |      exception lineno
     |  
     |  msg
     |      exception msg
     |  
     |  offset
     |      exception offset
     |  
     |  print_file_and_line
     |      exception print_file_and_line
     |  
     |  text
     |      exception text
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.SyntaxError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class MissingInterpolationOption(InterpolationError)
     |  A value specified for interpolation was missing.
     |  
     |  Method resolution order:
     |      MissingInterpolationOption
     |      InterpolationError
     |      ConfigObjError
     |      exceptions.SyntaxError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, option)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigObjError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.SyntaxError:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.SyntaxError:
     |  
     |  filename
     |      exception filename
     |  
     |  lineno
     |      exception lineno
     |  
     |  msg
     |      exception msg
     |  
     |  offset
     |      exception offset
     |  
     |  print_file_and_line
     |      exception print_file_and_line
     |  
     |  text
     |      exception text
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.SyntaxError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class NestingError(ConfigObjError)
     |  This error indicates a level of nesting that doesn't match.
     |  
     |  Method resolution order:
     |      NestingError
     |      ConfigObjError
     |      exceptions.SyntaxError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods inherited from ConfigObjError:
     |  
     |  __init__(self, message='', line_number=None, line='')
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigObjError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.SyntaxError:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.SyntaxError:
     |  
     |  filename
     |      exception filename
     |  
     |  lineno
     |      exception lineno
     |  
     |  msg
     |      exception msg
     |  
     |  offset
     |      exception offset
     |  
     |  print_file_and_line
     |      exception print_file_and_line
     |  
     |  text
     |      exception text
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.SyntaxError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class ParseError(ConfigObjError)
     |  This error indicates that a line is badly written.
     |  It is neither a valid ``key = value`` line,
     |  nor a valid section marker line.
     |  
     |  Method resolution order:
     |      ParseError
     |      ConfigObjError
     |      exceptions.SyntaxError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods inherited from ConfigObjError:
     |  
     |  __init__(self, message='', line_number=None, line='')
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigObjError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.SyntaxError:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.SyntaxError:
     |  
     |  filename
     |      exception filename
     |  
     |  lineno
     |      exception lineno
     |  
     |  msg
     |      exception msg
     |  
     |  offset
     |      exception offset
     |  
     |  print_file_and_line
     |      exception print_file_and_line
     |  
     |  text
     |      exception text
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.SyntaxError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class ReloadError(exceptions.IOError)
     |  A 'reload' operation failed.
     |  This exception is a subclass of ``IOError``.
     |  
     |  Method resolution order:
     |      ReloadError
     |      exceptions.IOError
     |      exceptions.EnvironmentError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.IOError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.EnvironmentError:
     |  
     |  __reduce__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.EnvironmentError:
     |  
     |  errno
     |      exception errno
     |  
     |  filename
     |      exception filename
     |  
     |  strerror
     |      exception strerror
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class RepeatSectionError(ConfigObjError)
     |  This error indicates additional sections in a section with a
     |  ``__many__`` (repeated) section.
     |  
     |  Method resolution order:
     |      RepeatSectionError
     |      ConfigObjError
     |      exceptions.SyntaxError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods inherited from ConfigObjError:
     |  
     |  __init__(self, message='', line_number=None, line='')
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigObjError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.SyntaxError:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.SyntaxError:
     |  
     |  filename
     |      exception filename
     |  
     |  lineno
     |      exception lineno
     |  
     |  msg
     |      exception msg
     |  
     |  offset
     |      exception offset
     |  
     |  print_file_and_line
     |      exception print_file_and_line
     |  
     |  text
     |      exception text
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.SyntaxError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class SimpleVal(__builtin__.object)
     |  A simple validator.
     |  Can be used to check that all members expected are present.
     |  
     |  To use it, provide a configspec with all your members in (the value given
     |  will be ignored). Pass an instance of ``SimpleVal`` to the ``validate``
     |  method of your ``ConfigObj``. ``validate`` will return ``True`` if all
     |  members are present, or a dictionary with True/False meaning
     |  present/missing. (Whole missing sections will be replaced with ``False``)
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |  
     |  check(self, check, member, missing=False)
     |      A dummy check method, always returns the value unchanged.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class UnknownType(exceptions.Exception)
     |  Method resolution order:
     |      UnknownType
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class UnreprError(ConfigObjError)
     |  An error parsing in unrepr mode.
     |  
     |  Method resolution order:
     |      UnreprError
     |      ConfigObjError
     |      exceptions.SyntaxError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Methods inherited from ConfigObjError:
     |  
     |  __init__(self, message='', line_number=None, line='')
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ConfigObjError:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.SyntaxError:
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.SyntaxError:
     |  
     |  filename
     |      exception filename
     |  
     |  lineno
     |      exception lineno
     |  
     |  msg
     |      exception msg
     |  
     |  offset
     |      exception offset
     |  
     |  print_file_and_line
     |      exception print_file_and_line
     |  
     |  text
     |      exception text
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.SyntaxError:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message

FUNCTIONS
    __newobj__(cls, *args)
    
    flatten_errors(cfg, res, levels=None, results=None)
        An example function that will turn a nested dictionary of results
        (as returned by ``ConfigObj.validate``) into a flat list.
        
        ``cfg`` is the ConfigObj instance being checked, ``res`` is the results
        dictionary returned by ``validate``.
        
        (This is a recursive function, so you shouldn't use the ``levels`` or
        ``results`` arguments - they are used by the function.)
        
        Returns a list of keys that failed. Each member of the list is a tuple::
        
            ([list of sections...], key, result)
        
        If ``validate`` was called with ``preserve_errors=False`` (the default)
        then ``result`` will always be ``False``.
        
        *list of sections* is a flattened list of sections that the key was found
        in.
        
        If the section was missing (or a section was expected and a scalar provided
        - or vice-versa) then key will be ``None``.
        
        If the value (or section) was missing then ``result`` will be ``False``.
        
        If ``validate`` was called with ``preserve_errors=True`` and a value
        was present, but failed the check, then ``result`` will be the exception
        object returned. You can use this as a string that describes the failure.
        
        For example *The value "3" is of the wrong type*.
    
    get_extra_values(conf, _prepend=())
        Find all the values and sections not in the configspec from a validated
        ConfigObj.
        
        ``get_extra_values`` returns a list of tuples where each tuple represents
        either an extra section, or an extra value.
        
        The tuples contain two values, a tuple representing the section the value 
        is in and the name of the extra values. For extra values in the top level
        section the first member will be an empty tuple. For values in the 'foo'
        section the first member will be ``('foo',)``. For members in the 'bar'
        subsection of the 'foo' section the first member will be ``('foo', 'bar')``.
        
        NOTE: If you call ``get_extra_values`` on a ConfigObj instance that hasn't
        been validated it will return an empty list.

DATA
    DEFAULT_INDENT_TYPE = '    '
    DEFAULT_INTERPOLATION = 'configparser'
    __all__ = ('DEFAULT_INDENT_TYPE', 'DEFAULT_INTERPOLATION', 'ConfigObjE...
    __version__ = '5.0.6'

VERSION
    5.0.6


