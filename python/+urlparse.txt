Help on module urlparse:

NAME
    urlparse - Parse (absolute and relative) URLs.

FILE
    /usr/lib/python2.7/urlparse.py

MODULE DOCS
    http://docs.python.org/library/urlparse

DESCRIPTION
    urlparse module is based upon the following RFC specifications.
    
    RFC 3986 (STD66): "Uniform Resource Identifiers" by T. Berners-Lee, R. Fielding
    and L.  Masinter, January 2005.
    
    RFC 2732 : "Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter
    and L.Masinter, December 1999.
    
    RFC 2396:  "Uniform Resource Identifiers (URI)": Generic Syntax by T.
    Berners-Lee, R. Fielding, and L. Masinter, August 1998.
    
    RFC 2368: "The mailto URL scheme", by P.Hoffman , L Masinter, J. Zwinski, July 1998.
    
    RFC 1808: "Relative Uniform Resource Locators", by R. Fielding, UC Irvine, June
    1995.
    
    RFC 1738: "Uniform Resource Locators (URL)" by T. Berners-Lee, L. Masinter, M.
    McCahill, December 1994
    
    RFC 3986 is considered the current standard and any future changes to
    urlparse module should conform with it.  The urlparse module is
    currently not entirely compliant with this RFC due to defacto
    scenarios for parsing, and for backward compatibility purposes, some
    parsing quirks from older RFCs are retained. The testcases in
    test_urlparse.py provides a good indicator of parsing behavior.

FUNCTIONS
    parse_qs(qs, keep_blank_values=0, strict_parsing=0)
        Parse a query given as a string argument.
        
        Arguments:
        
        qs: percent-encoded query string to be parsed
        
        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.
        
        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
    
    parse_qsl(qs, keep_blank_values=0, strict_parsing=0)
        Parse a query given as a string argument.
        
        Arguments:
        
        qs: percent-encoded query string to be parsed
        
        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.  A
            true value indicates that blanks should be retained as blank
            strings.  The default false value indicates that blank values
            are to be ignored and treated as if they were  not included.
        
        strict_parsing: flag indicating what to do with parsing errors. If
            false (the default), errors are silently ignored. If true,
            errors raise a ValueError exception.
        
        Returns a list, as G-d intended.
    
    urldefrag(url)
        Removes any existing fragment from URL.
        
        Returns a tuple of the defragmented URL and the fragment.  If
        the URL contained no fragments, the second element is the
        empty string.
    
    urljoin(base, url, allow_fragments=True)
        Join a base URL and a possibly relative URL to form an absolute
        interpretation of the latter.
    
    urlparse(url, scheme='', allow_fragments=True)
        Parse a URL into 6 components:
        <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
        Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
        Note that we don't break the components up in smaller bits
        (e.g. netloc is a single string) and we don't expand % escapes.
    
    urlsplit(url, scheme='', allow_fragments=True)
        Parse a URL into 5 components:
        <scheme>://<netloc>/<path>?<query>#<fragment>
        Return a 5-tuple: (scheme, netloc, path, query, fragment).
        Note that we don't break the components up in smaller bits
        (e.g. netloc is a single string) and we don't expand % escapes.
    
    urlunparse(data)
        Put a parsed URL back together again.  This may result in a
        slightly different, but equivalent URL, if the URL that was parsed
        originally had redundant delimiters, e.g. a ? with an empty query
        (the draft states that these are equivalent).
    
    urlunsplit(data)
        Combine the elements of a tuple as returned by urlsplit() into a
        complete URL as a string. The data argument can be any five-item iterable.
        This may result in a slightly different, but equivalent URL, if the URL that
        was parsed originally had unnecessary delimiters (for example, a ? with an
        empty query; the RFC states that these are equivalent).

DATA
    __all__ = ['urlparse', 'urlunparse', 'urljoin', 'urldefrag', 'urlsplit...


