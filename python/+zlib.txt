Help on built-in module zlib:

NAME
    zlib

FILE
    (built-in)

DESCRIPTION
    The functions in this module allow compression and decompression using the
    zlib library, which is based on GNU zip.
    
    adler32(string[, start]) -- Compute an Adler-32 checksum.
    compress(string[, level]) -- Compress string, with compression level in 0-9.
    compressobj([level]) -- Return a compressor object.
    crc32(string[, start]) -- Compute a CRC-32 checksum.
    decompress(string,[wbits],[bufsize]) -- Decompresses a compressed string.
    decompressobj([wbits]) -- Return a decompressor object.
    
    'wbits' is window buffer size.
    Compressor objects support compress() and flush() methods; decompressor
    objects support decompress() and flush().

CLASSES
    exceptions.Exception(exceptions.BaseException)
        error
    
    class error(exceptions.Exception)
     |  Method resolution order:
     |      error
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message

FUNCTIONS
    adler32(...)
        adler32(string[, start]) -- Compute an Adler-32 checksum of string.
        
        An optional starting value can be specified.  The returned checksum is
        a signed integer.
    
    compress(...)
        compress(string[, level]) -- Returned compressed string.
        
        Optional arg level is the compression level, in 0-9.
    
    compressobj(...)
        compressobj([level]) -- Return a compressor object.
        
        Optional arg level is the compression level, in 0-9.
    
    crc32(...)
        crc32(string[, start]) -- Compute a CRC-32 checksum of string.
        
        An optional starting value can be specified.  The returned checksum is
        a signed integer.
    
    decompress(...)
        decompress(string[, wbits[, bufsize]]) -- Return decompressed string.
        
        Optional arg wbits is the window buffer size.  Optional arg bufsize is
        the initial output buffer size.
    
    decompressobj(...)
        decompressobj([wbits]) -- Return a decompressor object.
        
        Optional arg wbits is the window buffer size.

DATA
    DEFLATED = 8
    DEF_MEM_LEVEL = 8
    MAX_WBITS = 15
    ZLIB_VERSION = '1.2.8'
    Z_BEST_COMPRESSION = 9
    Z_BEST_SPEED = 1
    Z_DEFAULT_COMPRESSION = -1
    Z_DEFAULT_STRATEGY = 0
    Z_FILTERED = 1
    Z_FINISH = 4
    Z_FULL_FLUSH = 3
    Z_HUFFMAN_ONLY = 2
    Z_NO_FLUSH = 0
    Z_SYNC_FLUSH = 2
    __version__ = '1.0'

VERSION
    1.0


