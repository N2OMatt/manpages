Help on module platform:

NAME
    platform

FILE
    /usr/lib/python2.7/platform.py

MODULE DOCS
    http://docs.python.org/library/platform

DESCRIPTION
    This module tries to retrieve as much platform-identifying data as
    possible. It makes this information available via function APIs.
    
    If called from the command line, it prints the platform
    information concatenated as single string to stdout. The output
    format is useable as part of a filename.

FUNCTIONS
    architecture(executable='/usr/bin/python2.7', bits='', linkage='')
        Queries the given executable (defaults to the Python interpreter
        binary) for various architecture information.
        
        Returns a tuple (bits,linkage) which contains information about
        the bit architecture and the linkage format used for the
        executable. Both values are returned as strings.
        
        Values that cannot be determined are returned as given by the
        parameter presets. If bits is given as '', the sizeof(pointer)
        (or sizeof(long) on Python version < 1.5.2) is used as
        indicator for the supported pointer size.
        
        The function relies on the system's "file" command to do the
        actual work. This is available on most if not all Unix
        platforms. On some non-Unix platforms where the "file" command
        does not exist and the executable is set to the Python interpreter
        binary defaults from _default_architecture are used.
    
    dist(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'fedora', 'redhat', 'centos', 'mandrake', 'mandriva', 'rocks', 'slackware', 'yellowdog', 'gentoo', 'UnitedLinux', 'turbolinux', 'Ubuntu'))
        Tries to determine the name of the Linux OS distribution name.
        
        The function first looks for a distribution release file in
        /etc and then reverts to _dist_try_harder() in case no
        suitable files are found.
        
        Returns a tuple (distname,version,id) which default to the
        args given as parameters.
    
    java_ver(release='', vendor='', vminfo=('', '', ''), osinfo=('', '', ''))
        Version interface for Jython.
        
        Returns a tuple (release,vendor,vminfo,osinfo) with vminfo being
        a tuple (vm_name,vm_release,vm_vendor) and osinfo being a
        tuple (os_name,os_version,os_arch).
        
        Values which cannot be determined are set to the defaults
        given as parameters (which all default to '').
    
    libc_ver(executable='/usr/bin/python2.7', lib='', version='', chunksize=2048)
        Tries to determine the libc version that the file executable
        (which defaults to the Python interpreter) is linked against.
        
        Returns a tuple of strings (lib,version) which default to the
        given parameters in case the lookup fails.
        
        Note that the function has intimate knowledge of how different
        libc versions add symbols to the executable and thus is probably
        only useable for executables compiled using gcc.
        
        The file is read and scanned in chunks of chunksize bytes.
    
    linux_distribution(distname='', version='', id='', supported_dists=('SuSE', 'debian', 'fedora', 'redhat', 'centos', 'mandrake', 'mandriva', 'rocks', 'slackware', 'yellowdog', 'gentoo', 'UnitedLinux', 'turbolinux', 'Ubuntu'), full_distribution_name=1)
        Tries to determine the name of the Linux OS distribution name.
        
        The function first looks for a distribution release file in
        /etc and then reverts to _dist_try_harder() in case no
        suitable files are found.
        
        supported_dists may be given to define the set of Linux
        distributions to look for. It defaults to a list of currently
        supported Linux distributions identified by their release file
        name.
        
        If full_distribution_name is true (default), the full
        distribution read from the OS is returned. Otherwise the short
        name taken from supported_dists is used.
        
        Returns a tuple (distname,version,id) which default to the
        args given as parameters.
    
    mac_ver(release='', versioninfo=('', '', ''), machine='')
        Get MacOS version information and return it as tuple (release,
        versioninfo, machine) with versioninfo being a tuple (version,
        dev_stage, non_release_version).
        
        Entries which cannot be determined are set to the parameter values
        which default to ''. All tuple entries are strings.
    
    machine()
        Returns the machine type, e.g. 'i386'
        
        An empty string is returned if the value cannot be determined.
    
    node()
        Returns the computer's network name (which may not be fully
        qualified)
        
        An empty string is returned if the value cannot be determined.
    
    platform(aliased=0, terse=0)
        Returns a single string identifying the underlying platform
        with as much useful information as possible (but no more :).
        
        The output is intended to be human readable rather than
        machine parseable. It may look different on different
        platforms and this is intended.
        
        If "aliased" is true, the function will use aliases for
        various platforms that report system names which differ from
        their common names, e.g. SunOS will be reported as
        Solaris. The system_alias() function is used to implement
        this.
        
        Setting terse to true causes the function to return only the
        absolute minimum information needed to identify the platform.
    
    popen(cmd, mode='r', bufsize=None)
        Portable popen() interface.
    
    processor()
        Returns the (true) processor name, e.g. 'amdk6'
        
        An empty string is returned if the value cannot be
        determined. Note that many platforms do not provide this
        information or simply return the same value as for machine(),
        e.g.  NetBSD does this.
    
    python_branch()
        Returns a string identifying the Python implementation
        branch.
        
        For CPython this is the Subversion branch from which the
        Python binary was built.
        
        If not available, an empty string is returned.
    
    python_build()
        Returns a tuple (buildno, builddate) stating the Python
        build number and date as strings.
    
    python_compiler()
        Returns a string identifying the compiler used for compiling
        Python.
    
    python_implementation()
        Returns a string identifying the Python implementation.
        
        Currently, the following implementations are identified:
          'CPython' (C implementation of Python),
          'IronPython' (.NET implementation of Python),
          'Jython' (Java implementation of Python),
          'PyPy' (Python implementation of Python).
    
    python_revision()
        Returns a string identifying the Python implementation
        revision.
        
        For CPython this is the Subversion revision from which the
        Python binary was built.
        
        If not available, an empty string is returned.
    
    python_version()
        Returns the Python version as string 'major.minor.patchlevel'
        
        Note that unlike the Python sys.version, the returned value
        will always include the patchlevel (it defaults to 0).
    
    python_version_tuple()
        Returns the Python version as tuple (major, minor, patchlevel)
        of strings.
        
        Note that unlike the Python sys.version, the returned value
        will always include the patchlevel (it defaults to 0).
    
    release()
        Returns the system's release, e.g. '2.2.0' or 'NT'
        
        An empty string is returned if the value cannot be determined.
    
    system()
        Returns the system/OS name, e.g. 'Linux', 'Windows' or 'Java'.
        
        An empty string is returned if the value cannot be determined.
    
    system_alias(system, release, version)
        Returns (system,release,version) aliased to common
        marketing names used for some systems.
        
        It also does some reordering of the information in some cases
        where it would otherwise cause confusion.
    
    uname()
        Fairly portable uname interface. Returns a tuple
        of strings (system,node,release,version,machine,processor)
        identifying the underlying platform.
        
        Note that unlike the os.uname function this also returns
        possible processor information as an additional tuple entry.
        
        Entries which cannot be determined are set to ''.
    
    version()
        Returns the system's release version, e.g. '#3 on degas'
        
        An empty string is returned if the value cannot be determined.
    
    win32_ver(release='', version='', csd='', ptype='')
        Get additional version information from the Windows Registry
        and return a tuple (version,csd,ptype) referring to version
        number, CSD level (service pack), and OS type (multi/single
        processor).
        
        As a hint: ptype returns 'Uniprocessor Free' on single
        processor NT machines and 'Multiprocessor Free' on multi
        processor machines. The 'Free' refers to the OS version being
        free of debugging code. It could also state 'Checked' which
        means the OS version uses debugging code, i.e. code that
        checks arguments, ranges, etc. (Thomas Heller).
        
        Note: this function works best with Mark Hammond's win32
        package installed, but also on Python 2.3 and later. It
        obviously only runs on Win32 compatible platforms.

DATA
    DEV_NULL = '/dev/null'
    __copyright__ = '\n    Copyright (c) 1999-2000, Marc-Andre Lemburg... ...
    __version__ = '1.0.7'

VERSION
    1.0.7


